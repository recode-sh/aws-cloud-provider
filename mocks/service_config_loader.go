// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/recode-sh/aws-cloud-provider/service (interfaces: ConfigLoader)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	aws "github.com/aws/aws-sdk-go-v2/aws"
	gomock "github.com/golang/mock/gomock"
	userconfig "github.com/recode-sh/aws-cloud-provider/userconfig"
)

// ServiceConfigLoader is a mock of ConfigLoader interface.
type ServiceConfigLoader struct {
	ctrl     *gomock.Controller
	recorder *ServiceConfigLoaderMockRecorder
}

// ServiceConfigLoaderMockRecorder is the mock recorder for ServiceConfigLoader.
type ServiceConfigLoaderMockRecorder struct {
	mock *ServiceConfigLoader
}

// NewServiceConfigLoader creates a new mock instance.
func NewServiceConfigLoader(ctrl *gomock.Controller) *ServiceConfigLoader {
	mock := &ServiceConfigLoader{ctrl: ctrl}
	mock.recorder = &ServiceConfigLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ServiceConfigLoader) EXPECT() *ServiceConfigLoaderMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *ServiceConfigLoader) Load(arg0 *userconfig.Config) (aws.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(aws.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *ServiceConfigLoaderMockRecorder) Load(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*ServiceConfigLoader)(nil).Load), arg0)
}
